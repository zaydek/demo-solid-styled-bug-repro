import { Component, JSX, ParentComponent, ParentProps, splitProps } from "solid-js"
import { Dynamic } from "solid-js/web"
import { cx } from "./css"

export type RenderComponent<Props = {}> = keyof JSX.IntrinsicElements | ParentComponent<Props>

export type StyledProps<Props = {}> = ParentProps<Props & {
	as?: keyof JSX.IntrinsicElements | Component
}>

export type StyledComponent<Props = {}> = ParentComponent<StyledProps<Props>> &
	{ className?: string }

export function styled<Props = {}>(component: RenderComponent<Props>, className: string) {
	const styled: StyledComponent<Props> = props => {
		const [curr, next] = splitProps(props, ["as"])
		return <>
			<Dynamic
				{...next}
				component={curr.as ?? component}
				class={cx(
					// @ts-expect-error
					next.class,
					className,
				)}
			>
				{next.children}
			</Dynamic>
		</>
	}
	styled.className = className
	return styled
}

styled.a                   = (className: string) => styled<JSX.AnchorHTMLAttributes<HTMLAnchorElement>>("a", className)
styled.abbr                = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("abbr", className)
styled.address             = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("address", className)
styled.area                = (className: string) => styled<JSX.AreaHTMLAttributes<HTMLAreaElement>>("area", className)
styled.article             = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("article", className)
styled.aside               = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("aside", className)
styled.audio               = (className: string) => styled<JSX.AudioHTMLAttributes<HTMLAudioElement>>("audio", className)
styled.b                   = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("b", className)
styled.base                = (className: string) => styled<JSX.BaseHTMLAttributes<HTMLBaseElement>>("base", className)
styled.bdi                 = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("bdi", className)
styled.bdo                 = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("bdo", className)
styled.big                 = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("big", className)
styled.blockquote          = (className: string) => styled<JSX.BlockquoteHTMLAttributes<HTMLElement>>("blockquote", className)
styled.body                = (className: string) => styled<JSX.HTMLAttributes<HTMLBodyElement>>("body", className)
styled.br                  = (className: string) => styled<JSX.HTMLAttributes<HTMLBRElement>>("br", className)
styled.button              = (className: string) => styled<JSX.ButtonHTMLAttributes<HTMLButtonElement>>("button", className)
styled.canvas              = (className: string) => styled<JSX.CanvasHTMLAttributes<HTMLCanvasElement>>("canvas", className)
styled.caption             = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("caption", className)
styled.cite                = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("cite", className)
styled.code                = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("code", className)
styled.col                 = (className: string) => styled<JSX.ColHTMLAttributes<HTMLTableColElement>>("col", className)
styled.colgroup            = (className: string) => styled<JSX.ColgroupHTMLAttributes<HTMLTableColElement>>("colgroup", className)
styled.data                = (className: string) => styled<JSX.DataHTMLAttributes<HTMLElement>>("data", className)
styled.datalist            = (className: string) => styled<JSX.HTMLAttributes<HTMLDataListElement>>("datalist", className)
styled.dd                  = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("dd", className)
styled.del                 = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("del", className)
styled.details             = (className: string) => styled<JSX.DetailsHtmlAttributes<HTMLDetailsElement>>("details", className)
styled.dfn                 = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("dfn", className)
styled.dialog              = (className: string) => styled<JSX.DialogHtmlAttributes<HTMLDialogElement>>("dialog", className)
styled.div                 = (className: string) => styled<JSX.HTMLAttributes<HTMLDivElement>>("div", className)
styled.dl                  = (className: string) => styled<JSX.HTMLAttributes<HTMLDListElement>>("dl", className)
styled.dt                  = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("dt", className)
styled.em                  = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("em", className)
styled.embed               = (className: string) => styled<JSX.EmbedHTMLAttributes<HTMLEmbedElement>>("embed", className)
styled.fieldset            = (className: string) => styled<JSX.FieldsetHTMLAttributes<HTMLFieldSetElement>>("fieldset", className)
styled.figcaption          = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("figcaption", className)
styled.figure              = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("figure", className)
styled.footer              = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("footer", className)
styled.form                = (className: string) => styled<JSX.FormHTMLAttributes<HTMLFormElement>>("form", className)
styled.h1                  = (className: string) => styled<JSX.HTMLAttributes<HTMLHeadingElement>>("h1", className)
styled.h2                  = (className: string) => styled<JSX.HTMLAttributes<HTMLHeadingElement>>("h2", className)
styled.h3                  = (className: string) => styled<JSX.HTMLAttributes<HTMLHeadingElement>>("h3", className)
styled.h4                  = (className: string) => styled<JSX.HTMLAttributes<HTMLHeadingElement>>("h4", className)
styled.h5                  = (className: string) => styled<JSX.HTMLAttributes<HTMLHeadingElement>>("h5", className)
styled.h6                  = (className: string) => styled<JSX.HTMLAttributes<HTMLHeadingElement>>("h6", className)
styled.head                = (className: string) => styled<JSX.HTMLAttributes<HTMLHeadElement>>("head", className)
styled.header              = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("header", className)
styled.hgroup              = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("hgroup", className)
styled.hr                  = (className: string) => styled<JSX.HTMLAttributes<HTMLHRElement>>("hr", className)
styled.html                = (className: string) => styled<JSX.HTMLAttributes<HTMLHtmlElement>>("html", className)
styled.i                   = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("i", className)
styled.iframe              = (className: string) => styled<JSX.IframeHTMLAttributes<HTMLIFrameElement>>("iframe", className)
styled.img                 = (className: string) => styled<JSX.ImgHTMLAttributes<HTMLImageElement>>("img", className)
styled.input               = (className: string) => styled<JSX.InputHTMLAttributes<HTMLInputElement>>("input", className)
styled.ins                 = (className: string) => styled<JSX.InsHTMLAttributes<HTMLModElement>>("ins", className)
styled.kbd                 = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("kbd", className)
styled.keygen              = (className: string) => styled<JSX.KeygenHTMLAttributes<HTMLElement>>("keygen", className)
styled.label               = (className: string) => styled<JSX.LabelHTMLAttributes<HTMLLabelElement>>("label", className)
styled.legend              = (className: string) => styled<JSX.HTMLAttributes<HTMLLegendElement>>("legend", className)
styled.li                  = (className: string) => styled<JSX.LiHTMLAttributes<HTMLLIElement>>("li", className)
styled.link                = (className: string) => styled<JSX.LinkHTMLAttributes<HTMLLinkElement>>("link", className)
styled.main                = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("main", className)
styled.map                 = (className: string) => styled<JSX.MapHTMLAttributes<HTMLMapElement>>("map", className)
styled.mark                = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("mark", className)
styled.menu                = (className: string) => styled<JSX.MenuHTMLAttributes<HTMLElement>>("menu", className)
styled.menuitem            = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("menuitem", className)
styled.meta                = (className: string) => styled<JSX.MetaHTMLAttributes<HTMLMetaElement>>("meta", className)
styled.meter               = (className: string) => styled<JSX.MeterHTMLAttributes<HTMLElement>>("meter", className)
styled.nav                 = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("nav", className)
styled.noindex             = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("noindex", className)
styled.noscript            = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("noscript", className)
styled.object              = (className: string) => styled<JSX.ObjectHTMLAttributes<HTMLObjectElement>>("object", className)
styled.ol                  = (className: string) => styled<JSX.OlHTMLAttributes<HTMLOListElement>>("ol", className)
styled.optgroup            = (className: string) => styled<JSX.OptgroupHTMLAttributes<HTMLOptGroupElement>>("optgroup", className)
styled.option              = (className: string) => styled<JSX.OptionHTMLAttributes<HTMLOptionElement>>("option", className)
styled.output              = (className: string) => styled<JSX.OutputHTMLAttributes<HTMLElement>>("output", className)
styled.p                   = (className: string) => styled<JSX.HTMLAttributes<HTMLParagraphElement>>("p", className)
styled.param               = (className: string) => styled<JSX.ParamHTMLAttributes<HTMLParamElement>>("param", className)
styled.picture             = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("picture", className)
styled.pre                 = (className: string) => styled<JSX.HTMLAttributes<HTMLPreElement>>("pre", className)
styled.progress            = (className: string) => styled<JSX.ProgressHTMLAttributes<HTMLProgressElement>>("progress", className)
styled.q                   = (className: string) => styled<JSX.QuoteHTMLAttributes<HTMLQuoteElement>>("q", className)
styled.rp                  = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("rp", className)
styled.rt                  = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("rt", className)
styled.ruby                = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("ruby", className)
styled.s                   = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("s", className)
styled.samp                = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("samp", className)
styled.script              = (className: string) => styled<JSX.ScriptHTMLAttributes<HTMLElement>>("script", className)
styled.section             = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("section", className)
styled.select              = (className: string) => styled<JSX.SelectHTMLAttributes<HTMLSelectElement>>("select", className)
styled.slot                = (className: string) => styled<JSX.HTMLSlotElementAttributes>("slot", className)
styled.small               = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("small", className)
styled.source              = (className: string) => styled<JSX.SourceHTMLAttributes<HTMLSourceElement>>("source", className)
styled.span                = (className: string) => styled<JSX.HTMLAttributes<HTMLSpanElement>>("span", className)
styled.strong              = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("strong", className)
styled.style               = (className: string) => styled<JSX.StyleHTMLAttributes<HTMLStyleElement>>("style", className)
styled.sub                 = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("sub", className)
styled.summary             = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("summary", className)
styled.sup                 = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("sup", className)
styled.table               = (className: string) => styled<JSX.HTMLAttributes<HTMLTableElement>>("table", className)
styled.tbody               = (className: string) => styled<JSX.HTMLAttributes<HTMLTableSectionElement>>("tbody", className)
styled.td                  = (className: string) => styled<JSX.TdHTMLAttributes<HTMLTableDataCellElement>>("td", className)
styled.textarea            = (className: string) => styled<JSX.TextareaHTMLAttributes<HTMLTextAreaElement>>("textarea", className)
styled.tfoot               = (className: string) => styled<JSX.HTMLAttributes<HTMLTableSectionElement>>("tfoot", className)
styled.th                  = (className: string) => styled<JSX.ThHTMLAttributes<HTMLTableHeaderCellElement>>("th", className)
styled.thead               = (className: string) => styled<JSX.HTMLAttributes<HTMLTableSectionElement>>("thead", className)
styled.time                = (className: string) => styled<JSX.TimeHTMLAttributes<HTMLElement>>("time", className)
styled.title               = (className: string) => styled<JSX.HTMLAttributes<HTMLTitleElement>>("title", className)
styled.tr                  = (className: string) => styled<JSX.HTMLAttributes<HTMLTableRowElement>>("tr", className)
styled.track               = (className: string) => styled<JSX.TrackHTMLAttributes<HTMLTrackElement>>("track", className)
styled.u                   = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("u", className)
styled.ul                  = (className: string) => styled<JSX.HTMLAttributes<HTMLUListElement>>("ul", className)
styled.var                 = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("var", className)
styled.video               = (className: string) => styled<JSX.VideoHTMLAttributes<HTMLVideoElement>>("video", className)
styled.wbr                 = (className: string) => styled<JSX.HTMLAttributes<HTMLElement>>("wbr", className)
styled.svg                 = (className: string) => styled<JSX.SvgSVGAttributes<SVGSVGElement>>("svg", className)
styled.animate             = (className: string) => styled<JSX.AnimateSVGAttributes<SVGAnimateElement>>("animate", className)
styled.animateMotion       = (className: string) => styled<JSX.AnimateMotionSVGAttributes<SVGAnimateMotionElement>>("animateMotion", className)
styled.animateTransform    = (className: string) => styled<JSX.AnimateTransformSVGAttributes<SVGAnimateTransformElement>>("animateTransform", className)
styled.circle              = (className: string) => styled<JSX.CircleSVGAttributes<SVGCircleElement>>("circle", className)
styled.clipPath            = (className: string) => styled<JSX.ClipPathSVGAttributes<SVGClipPathElement>>("clipPath", className)
styled.defs                = (className: string) => styled<JSX.DefsSVGAttributes<SVGDefsElement>>("defs", className)
styled.desc                = (className: string) => styled<JSX.DescSVGAttributes<SVGDescElement>>("desc", className)
styled.ellipse             = (className: string) => styled<JSX.EllipseSVGAttributes<SVGEllipseElement>>("ellipse", className)
styled.feBlend             = (className: string) => styled<JSX.FeBlendSVGAttributes<SVGFEBlendElement>>("feBlend", className)
styled.feColorMatrix       = (className: string) => styled<JSX.FeColorMatrixSVGAttributes<SVGFEColorMatrixElement>>("feColorMatrix", className)
styled.feComponentTransfer = (className: string) => styled<JSX.FeComponentTransferSVGAttributes<SVGFEComponentTransferElement>>("feComponentTransfer", className)
styled.feComposite         = (className: string) => styled<JSX.FeCompositeSVGAttributes<SVGFECompositeElement>>("feComposite", className)
styled.feConvolveMatrix    = (className: string) => styled<JSX.FeConvolveMatrixSVGAttributes<SVGFEConvolveMatrixElement>>("feConvolveMatrix", className)
styled.feDiffuseLighting   = (className: string) => styled<JSX.FeDiffuseLightingSVGAttributes<SVGFEDiffuseLightingElement>>("feDiffuseLighting", className)
styled.feDisplacementMap   = (className: string) => styled<JSX.FeDisplacementMapSVGAttributes<SVGFEDisplacementMapElement>>("feDisplacementMap", className)
styled.feDistantLight      = (className: string) => styled<JSX.FeDistantLightSVGAttributes<SVGFEDistantLightElement>>("feDistantLight", className)
styled.feFlood             = (className: string) => styled<JSX.FeFloodSVGAttributes<SVGFEFloodElement>>("feFlood", className)
styled.feFuncA             = (className: string) => styled<JSX.FeFuncSVGAttributes<SVGFEFuncAElement>>("feFuncA", className)
styled.feFuncB             = (className: string) => styled<JSX.FeFuncSVGAttributes<SVGFEFuncBElement>>("feFuncB", className)
styled.feFuncG             = (className: string) => styled<JSX.FeFuncSVGAttributes<SVGFEFuncGElement>>("feFuncG", className)
styled.feFuncR             = (className: string) => styled<JSX.FeFuncSVGAttributes<SVGFEFuncRElement>>("feFuncR", className)
styled.feGaussianBlur      = (className: string) => styled<JSX.FeGaussianBlurSVGAttributes<SVGFEGaussianBlurElement>>("feGaussianBlur", className)
styled.feImage             = (className: string) => styled<JSX.FeImageSVGAttributes<SVGFEImageElement>>("feImage", className)
styled.feMerge             = (className: string) => styled<JSX.FeMergeSVGAttributes<SVGFEMergeElement>>("feMerge", className)
styled.feMergeNode         = (className: string) => styled<JSX.FeMergeNodeSVGAttributes<SVGFEMergeNodeElement>>("feMergeNode", className)
styled.feMorphology        = (className: string) => styled<JSX.FeMorphologySVGAttributes<SVGFEMorphologyElement>>("feMorphology", className)
styled.feOffset            = (className: string) => styled<JSX.FeOffsetSVGAttributes<SVGFEOffsetElement>>("feOffset", className)
styled.fePointLight        = (className: string) => styled<JSX.FePointLightSVGAttributes<SVGFEPointLightElement>>("fePointLight", className)
styled.feSpecularLighting  = (className: string) => styled<JSX.FeSpecularLightingSVGAttributes<SVGFESpecularLightingElement>>("feSpecularLighting", className)
styled.feSpotLight         = (className: string) => styled<JSX.FeSpotLightSVGAttributes<SVGFESpotLightElement>>("feSpotLight", className)
styled.feTile              = (className: string) => styled<JSX.FeTileSVGAttributes<SVGFETileElement>>("feTile", className)
styled.feTurbulence        = (className: string) => styled<JSX.FeTurbulanceSVGAttributes<SVGFETurbulenceElement>>("feTurbulence", className)
styled.filter              = (className: string) => styled<JSX.FilterSVGAttributes<SVGFilterElement>>("filter", className)
styled.foreignObject       = (className: string) => styled<JSX.ForeignObjectSVGAttributes<SVGForeignObjectElement>>("foreignObject", className)
styled.g                   = (className: string) => styled<JSX.GSVGAttributes<SVGGElement>>("g", className)
styled.image               = (className: string) => styled<JSX.ImageSVGAttributes<SVGImageElement>>("image", className)
styled.line                = (className: string) => styled<JSX.LineSVGAttributes<SVGLineElement>>("line", className)
styled.linearGradient      = (className: string) => styled<JSX.LinearGradientSVGAttributes<SVGLinearGradientElement>>("linearGradient", className)
styled.marker              = (className: string) => styled<JSX.MarkerSVGAttributes<SVGMarkerElement>>("marker", className)
styled.mask                = (className: string) => styled<JSX.MaskSVGAttributes<SVGMaskElement>>("mask", className)
styled.metadata            = (className: string) => styled<JSX.MetadataSVGAttributes<SVGMetadataElement>>("metadata", className)
styled.path                = (className: string) => styled<JSX.PathSVGAttributes<SVGPathElement>>("path", className)
styled.pattern             = (className: string) => styled<JSX.PatternSVGAttributes<SVGPatternElement>>("pattern", className)
styled.polygon             = (className: string) => styled<JSX.PolygonSVGAttributes<SVGPolygonElement>>("polygon", className)
styled.polyline            = (className: string) => styled<JSX.PolylineSVGAttributes<SVGPolylineElement>>("polyline", className)
styled.radialGradient      = (className: string) => styled<JSX.RadialGradientSVGAttributes<SVGRadialGradientElement>>("radialGradient", className)
styled.rect                = (className: string) => styled<JSX.RectSVGAttributes<SVGRectElement>>("rect", className)
styled.stop                = (className: string) => styled<JSX.StopSVGAttributes<SVGStopElement>>("stop", className)
styled.switch              = (className: string) => styled<JSX.SwitchSVGAttributes<SVGSwitchElement>>("switch", className)
styled.symbol              = (className: string) => styled<JSX.SymbolSVGAttributes<SVGSymbolElement>>("symbol", className)
styled.text                = (className: string) => styled<JSX.TextSVGAttributes<SVGTextElement>>("text", className)
styled.textPath            = (className: string) => styled<JSX.TextPathSVGAttributes<SVGTextPathElement>>("textPath", className)
styled.tspan               = (className: string) => styled<JSX.TSpanSVGAttributes<SVGTSpanElement>>("tspan", className)
styled.use                 = (className: string) => styled<JSX.UseSVGAttributes<SVGUseElement>>("use", className)
styled.view                = (className: string) => styled<JSX.ViewSVGAttributes<SVGViewElement>>("view", className)
