@use "sass:list";
@use "sass:meta";
@use "sass:string";

// Shorthand for describing a CSS variable-based color
//
//   color(base 100%)
//   -> hsl(var(--base-hue) var(--base-saturation) 100%)
//
@function color($args, $alpha: 100%) {
	$a1: list.nth($args, 1);
	$a2: list.nth($args, 2);
	@if $alpha == 100% {
		@return string.unquote("hsl(var(--#{$a1}-hue) var(--#{$a1}-saturation) #{$a2})");
	} @else {
		@return string.unquote("hsl(var(--#{$a1}-hue) var(--#{$a1}-saturation) #{$a2} / #{$alpha})");
	}
}

// Shorthand for describing a CSS variable-based themed color
//
//   theme-color(base 100%)
//   -> (
//   ->   light: hsl(var(--base-hue) var(--base-saturation) 100%),
//   ->   dark:  hsl(var(--base-hue) var(--base-saturation) 10%),
//   -> )
//
@function theme-color($args, $alpha: 100%, $delta: 10%) {
	$dark-args: (list.nth($args, 1) 100% - list.nth($args, 2) + $delta);
	@return (
		light: color($args, $alpha),
		dark:  color($dark-args, $alpha),
	);
}

////////////////////////////////////////

$tint-hue:        240deg;
$tint-saturation: 50%;

$base-hue:        220deg;
$base-saturation: 100%;

////////////////////////////////////////

$tint-color: theme-color(tint 50%);

$card-color: theme-color(base 100%);
$card-box-shadow:
	0 0 0 1px color(base 50%, $alpha: 50%);
